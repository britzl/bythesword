local messages = require("ecs.messages")
local hud = require("hud.messages")
local input_states = require("lib.input_states")

local INPUT_LEFT = hash("left")
local INPUT_RIGHT = hash("right")
local INPUT_UP = hash("up")
local INPUT_DOWN = hash("down")
local INPUT_JUMP = hash("jump")
local INPUT_TOUCH = hash("touch")
local INPUT_ATTACK = hash("attack")
local INPUT_SPECIAL_ATTACK1 = hash("special_attack1")

function init(self)
	msg.post(".", "acquire_input_focus")
	local health = go.get("#health", "HEALTH")
	assert(health, "Expected to find a HEALTH property on the player")
	msg.post("game:/hud", hud.INIT, { health = health })
	self.weapon_url = msg.url("weapon")
	self.weapon_left_position = go.get_position(self.weapon_url)
	self.weapon_right_position = vmath.vector3(math.abs(self.weapon_left_position.x), self.weapon_left_position.y, self.weapon_left_position.z)
	print(self.weapon_url)
	print(msg.url())
	
	--go.set_scale(2)
end

function update(self, dt)
	--msg.post("#health", messages.DISABLE_SCRIPT)
end

function on_message(self, message_id, message, sender)
	if message_id == messages.DYING then
		msg.post("game:/game", messages.PLAYER_DEAD)
	elseif message_id == messages.HEALTH_CHANGED then
		msg.post("game:/hud", hud.UPDATE, { health = message.health })
	end
end


local DIRECTION_ZERO = { direction = 0 }
local DIRECTION_NEGATIVE = { direction = -1 }
local DIRECTION_POSITIVE = { direction = 1 }

function on_input(self, action_id, action)
	input_states.on_input(action_id, action)
	if action_id == INPUT_RIGHT or action_id == INPUT_LEFT then
		if action.pressed then
			local direction = (action_id == INPUT_RIGHT) and action.value or -action.value
			if direction == -1 then
				go.set_position(self.weapon_left_position, self.weapon_url)
			else
				go.set_position(self.weapon_right_position, self.weapon_url)
			end
			msg.post(".", messages.RUN, { direction = direction })
		elseif action.released then
			if input_states.is_pressed(INPUT_RIGHT) then
				msg.post(".", messages.RUN, DIRECTION_POSITIVE)
				print(self.weapon_url, self.weapon_right_position) 
				go.set_position(self.weapon_url, self.weapon_right_position)
			elseif input_states.is_pressed(INPUT_LEFT) then
				msg.post(".", messages.RUN, DIRECTION_NEGATIVE)
				print(self.weapon_url, self.weapon_left_position) 
				go.set_position(self.weapon_url, self.weapon_left_position)
			else
				msg.post(".", messages.RUN, DIRECTION_ZERO)
				msg.post(".", messages.IDLE)
			end
		end
	elseif action_id == INPUT_UP or action_id == INPUT_DOWN then
		if action.pressed then
			msg.post(".", messages.CLIMB, { direction = (action_id == INPUT_UP) and 1 or -1 })
		elseif action.released then
			if input_states.is_pressed(INPUT_UP) then
				msg.post(".", messages.CLIMB, DIRECTION_POSITIVE)
			elseif input_states.is_pressed(INPUT_DOWN) then
				msg.post(".", messages.CLIMB, DIRECTION_NEGATIVE)
			else
				msg.post(".", messages.CLIMB, DIRECTION_ZERO)
				msg.post(".", messages.IDLE)
			end
		end
	elseif action_id == INPUT_ATTACK and action.pressed then
		msg.post(".", messages.ATTACK)
	elseif action_id == INPUT_SPECIAL_ATTACK1 and action.pressed then
		msg.post(".", messages.SPECIAL_ATTACK1)
	elseif action_id == INPUT_JUMP then
		if action.pressed then
			msg.post(".", messages.JUMP)
		elseif action.released then
			msg.post(".", messages.ABORT_JUMP)
		end
	end
end
